{"version":3,"sources":["components/NotFoundPage/NotFoundPage.jsx","api.js","components/PersonRow/PersonRow.jsx","components/PeopleTable/PeopleTable.jsx","components/PeoplePage/PeoplePage.jsx","App.jsx","index.jsx"],"names":["NotFoundPage","getPeople","a","fetch","response","json","PersonRow","person","sortQuery","name","sex","born","died","fatherName","motherName","slug","mother","father","personSlug","useParams","location","useLocation","className","classnames","activePerson","sortedCollumn","to","pathname","search","PeopleTable","people","searchParams","URLSearchParams","get","history","useHistory","handleSort","queryValue","set","push","toString","sorteredPeople","useMemo","peopleArr","sort","b","localeCompare","reverse","thead__cell_active","onClick","map","key","PeoplePage","useState","setPeople","query","filteredPeople","filter","any","toLowerCase","includes","useEffect","then","result","find","type","value","onChange","event","target","length","App","activeClassName","exact","path","ReactDOM","render","document","getElementById"],"mappings":"kPAEaA,G,MAAe,kBAC1B,gD,yCCAWC,EAAS,uCAAG,4BAAAC,EAAA,sEACAC,MAHN,qEAEM,cACjBC,EADiB,yBAGhBA,EAASC,QAHO,2CAAH,qD,gBCGTC,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAC1BC,EAQKF,EARLE,KACNC,EAOWH,EAPXG,IACAC,EAMWJ,EANXI,KACAC,EAKWL,EALXK,KACAC,EAIWN,EAJXM,WACAC,EAGWP,EAHXO,WACAC,EAEWR,EAFXQ,KACAC,EACWT,EADXS,OACAC,EAAWV,EAAXU,OAEMC,EAAeC,cAAfD,WACFE,EAAWC,cAEjB,OACE,oCACE,wBAAIC,UAAWC,IAAW,CACxBC,aAAcN,IAAeH,KAG7B,wBACEO,UAAWC,IAAW,CACpBE,cAA6B,SAAdjB,KAGjB,kBAAC,IAAD,CACEc,UAAWC,IAAW,CACpB,WAAoB,MAARb,EACZ,aAAsB,MAARA,IAEhBgB,GAAI,CACFC,SAAS,WAAD,OAAaZ,GACrBa,OAAQR,EAASQ,SAGlBnB,IAGL,wBACEa,UAAWC,IAAW,CACpBE,cAA6B,QAAdjB,KAGhBE,GAEH,wBACEY,UAAWC,IAAW,CACpBE,cAA6B,SAAdjB,KAGhBG,GAEH,wBACEW,UAAWC,IAAW,CACpBE,cAA6B,SAAdjB,KAGhBI,GAEH,wBACEU,UAAWC,IAAW,CACpBE,cAA6B,eAAdjB,KAGhBQ,EAEG,kBAAC,IAAD,CACEM,UAAU,aACVI,GAAI,CACFC,SAAS,WAAD,OAAaX,EAAOD,MAC5Ba,OAAQR,EAASQ,SAGlBd,GATA,UAYAA,GAAc,YAGvB,wBACEQ,UAAWC,IAAW,CACpBE,cAA6B,eAAdjB,KAGhBS,EAEG,kBAAC,IAAD,CACEK,UAAU,WACVI,GAAI,CACFC,SAAS,WAAD,OAAaV,EAAOF,MAC5Ba,OAAQR,EAASQ,SAGlBf,GATA,UAYCA,GAAc,eChGnBgB,EAAc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBV,EAAWC,cACXU,EAAe,IAAIC,gBAAgBZ,EAASQ,QAC5CpB,EAAYuB,EAAaE,IAAI,WAAa,GAC1CC,EAAUC,cAEVC,EAAa,SAACC,GAClBN,EAAaO,IAAI,YACfP,EAAaE,IAAI,YAAcI,GACM,QAAlCN,EAAaE,IAAI,aAChB,OACA,OACNF,EAAaO,IAAI,SAAUD,GAC3BH,EAAQK,KAAK,CACXX,OAAQG,EAAaS,cAInBC,EAAiBC,mBAAQ,WAC7B,IAAMC,EAAYb,EAAOc,MAAK,SAAC1C,EAAG2C,GAChC,OAAQrC,GACN,IAAK,OACH,OAAON,EAAEO,KAAKqC,cAAcD,EAAEpC,MAChC,IAAK,MACH,OAAOP,EAAEQ,IAAIoC,cAAcD,EAAEnC,KAC/B,IAAK,OACH,OAAOR,EAAES,KAAOkC,EAAElC,KACpB,IAAK,OACH,OAAOT,EAAEU,KAAOiC,EAAEjC,KACpB,IAAK,aACH,GAAIV,EAAEY,WACJ,OAAO+B,EAAE/B,WAAaZ,EAAEY,WAAWgC,cAAcD,EAAE/B,aAAe,EAGpE,GAAI+B,EAAE/B,WACJ,OAAOZ,EAAEY,WAAa+B,EAAE/B,WAAWgC,cAAc5C,EAAEY,YAAc,EAGnE,MAEF,IAAK,aACH,GAAIZ,EAAEW,WACJ,OAAOgC,EAAEhC,WAAaX,EAAEW,WAAWiC,cAAcD,EAAEhC,aAAe,EAGpE,GAAIgC,EAAEhC,WACJ,OAAOX,EAAEW,WAAagC,EAAEhC,WAAWiC,cAAc5C,EAAEW,YAAc,EAGnE,MAEF,QACE,OAAOX,IAAM2C,EAGjB,OAAO,KAGT,MAAsC,QAAlCd,EAAaE,IAAI,aACZU,EAGFA,EAAUI,YAEnB,CAACvC,EAAWsB,EAAQC,EAAaE,IAAI,eAErC,OACE,2BAAOX,UAAU,eACf,+BACE,4BACE,wBACEA,UAAWC,IAAW,cAAe,CACnCyB,mBAAmD,SAA/BjB,EAAaE,IAAI,YAEvCgB,QAAS,WACPb,EAAW,UALf,QAgBA,wBACEd,UAAWC,IAAW,cAAe,CACnCyB,mBAAmD,QAA/BjB,EAAaE,IAAI,YAEvCgB,QAAS,WACPb,EAAW,SALf,OAUA,wBACEd,UAAWC,IAAW,cAAe,CACnCyB,mBAAmD,SAA/BjB,EAAaE,IAAI,YAEvCgB,QAAS,WACPb,EAAW,UALf,QAUA,wBACEd,UAAWC,IAAW,cAAe,CACnCyB,mBAAmD,SAA/BjB,EAAaE,IAAI,YAEvCgB,QAAS,WACPb,EAAW,UALf,QAUA,wBACEd,UAAWC,IAAW,cAAe,CACnCyB,mBAAmD,eAA/BjB,EAAaE,IAAI,YAEvCgB,QAAS,WACPb,EAAW,gBALf,UAUA,wBACEd,UAAWC,IAAW,cAAe,CACnCyB,mBAAmD,eAA/BjB,EAAaE,IAAI,YAEvCgB,QAAS,WACPb,EAAW,gBALf,YAYJ,+BACGK,EAAeS,KAAI,SAAA3C,GAAM,OACxB,kBAAC,EAAD,CACE4C,IAAK5C,EAAOE,KACZF,OAAQA,EACRC,UAAWA,UChJV4C,EAAa,WAAO,IAAD,EACFC,mBAAS,IADP,mBACvBvB,EADuB,KACfwB,EADe,KAExBlC,EAAWC,cACXa,EAAUC,cACVJ,EAAe,IAAIC,gBAAgBZ,EAASQ,QAC5C2B,EAAQxB,EAAaE,IAAI,UAAY,GACrCuB,EAAiBd,mBAAQ,kBAAMZ,EAClC2B,QAAO,SAACC,GACP,SAAIA,EAAI5C,aACH4C,EAAI5C,WAAW6C,cAAcC,SAASL,EAAMI,qBAI7CD,EAAI7C,aACH6C,EAAI7C,WAAW8C,cAAcC,SAASL,EAAMI,iBAI1CD,EAAIjD,KAAKkD,cAAcC,SAASL,EAAMI,qBAEjD,CAAC7B,EAAQyB,IAkBT,OAdAM,qBAAU,WACR5D,IACG6D,MAAK,SAAAC,GAAM,OAAIT,EAAUS,EACvBb,KAAI,SAAA3C,GAAM,kCAEJA,GAFI,IAGPS,OAAQ+C,EAAOC,MAAK,SAAAN,GAAG,OAAIA,EAAIjD,OAASF,EAAOO,cAC/CG,OAAQ8C,EAAOC,MAAK,SAAAN,GAAG,OAAIA,EAAIjD,OAASF,EAAOM,yBAGtD,IAKD,oCACE,2CACA,6BACE,2BACEoD,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACC,GACTrC,EAAaO,IAAI,QAAS8B,EAAMC,OAAOH,OACvChC,EAAQK,KAAK,CACXX,OAAQG,EAAaS,iBAK5BV,EAAOwC,OAAS,GACf,kBAAC,EAAD,CACExC,OAAQ0B,MCRHe,EA7CH,kBACV,yBAAKjD,UAAU,OACb,gCACE,yBAAKA,UAAU,OACb,wBAAIA,UAAU,aACZ,wBAAIA,UAAU,aACZ,kBAAC,IAAD,CACEA,UAAU,YACVkD,gBAAgB,cAChB9C,GAAG,IACH+C,OAAK,GAJP,SASF,wBAAInD,UAAU,aACZ,kBAAC,IAAD,CACEA,UAAU,YACVkD,gBAAgB,cAChB9C,GAAG,WAHL,cAYR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgD,KAAK,IAAID,OAAK,GACnB,yCAEF,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,IAAD,CAAUhD,GAAG,OAEf,kBAAC,IAAD,CAAOgD,KAAK,wBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCxCRC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.adbd5a11.chunk.js","sourcesContent":["import React from 'react';\n\nexport const NotFoundPage = () => (\n  <h1>Page not found</h1>\n);\n","// eslint-disable-next-line max-len\nconst PEOPLE_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async() => {\n  const response = await fetch(PEOPLE_URL);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink, useParams, useLocation } from 'react-router-dom';\nimport classnames from 'classnames';\n// import { PersonName } from '../PersonName';\n\nexport const PersonRow = ({ person, sortQuery }) => {\n  const { name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father } = person;\n\n  const { personSlug } = useParams();\n  const location = useLocation();\n\n  return (\n    <>\n      <tr className={classnames({\n        activePerson: personSlug === slug,\n      })}\n      >\n        <td\n          className={classnames({\n            sortedCollumn: sortQuery === 'name',\n          })}\n        >\n          <NavLink\n            className={classnames({\n              'link-man': sex === 'm',\n              'link-woman': sex === 'f',\n            })}\n            to={{\n              pathname: `/people/${slug}`,\n              search: location.search,\n            }}\n          >\n            {name}\n          </NavLink>\n        </td>\n        <td\n          className={classnames({\n            sortedCollumn: sortQuery === 'sex',\n          })}\n        >\n          {sex}\n        </td>\n        <td\n          className={classnames({\n            sortedCollumn: sortQuery === 'born',\n          })}\n        >\n          {born}\n        </td>\n        <td\n          className={classnames({\n            sortedCollumn: sortQuery === 'died',\n          })}\n        >\n          {died}\n        </td>\n        <td\n          className={classnames({\n            sortedCollumn: sortQuery === 'motherName',\n          })}\n        >\n          {mother\n            ? (\n              <NavLink\n                className=\"link-woman\"\n                to={{\n                  pathname: `/people/${mother.slug}`,\n                  search: location.search,\n                }}\n              >\n                {motherName}\n              </NavLink>\n            )\n            : `${motherName || 'No info'}`\n          }\n        </td>\n        <td\n          className={classnames({\n            sortedCollumn: sortQuery === 'fatherName',\n          })}\n        >\n          {father\n            ? (\n              <NavLink\n                className=\"link-man\"\n                to={{\n                  pathname: `/people/${father.slug}`,\n                  search: location.search,\n                }}\n              >\n                {fatherName}\n              </NavLink>\n            )\n            : (`${fatherName || 'No info'}`)\n          }\n        </td>\n      </tr>\n    </>\n  );\n};\n\nPersonRow.propTypes = {\n  person: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    fatherName: PropTypes.string,\n    motherName: PropTypes.string,\n    slug: PropTypes.string.isRequired,\n    mother: PropTypes.object,\n    father: PropTypes.object,\n  }).isRequired,\n  sortQuery: PropTypes.string.isRequired,\n};\n","import React, { useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { PersonRow } from '../PersonRow';\n\nexport const PeopleTable = ({ people }) => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const sortQuery = searchParams.get('sortBy') || '';\n  const history = useHistory();\n\n  const handleSort = (queryValue) => {\n    searchParams.set('sortOrder',\n      searchParams.get('sortBy') === queryValue\n      && searchParams.get('sortOrder') === 'asc'\n        ? 'desc'\n        : 'asc');\n    searchParams.set('sortBy', queryValue);\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const sorteredPeople = useMemo(() => {\n    const peopleArr = people.sort((a, b) => {\n      switch (sortQuery) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'sex':\n          return a.sex.localeCompare(b.sex);\n        case 'born':\n          return a.born - b.born;\n        case 'died':\n          return a.died - b.died;\n        case 'motherName':\n          if (a.motherName) {\n            return b.motherName ? a.motherName.localeCompare(b.motherName) : -1;\n          }\n\n          if (b.motherName) {\n            return a.motherName ? b.motherName.localeCompare(a.motherName) : 1;\n          }\n\n          break;\n\n        case 'fatherName':\n          if (a.fatherName) {\n            return b.fatherName ? a.fatherName.localeCompare(b.fatherName) : -1;\n          }\n\n          if (b.fatherName) {\n            return a.fatherName ? b.fatherName.localeCompare(a.fatherName) : 1;\n          }\n\n          break;\n\n        default:\n          return a === b;\n      }\n\n      return true;\n    });\n\n    if (searchParams.get('sortOrder') === 'asc') {\n      return peopleArr;\n    }\n\n    return peopleArr.reverse();\n  },\n  [sortQuery, people, searchParams.get('sortOrder')]);\n\n  return (\n    <table className=\"PeopleTable\">\n      <thead>\n        <tr>\n          <th\n            className={classnames('thead__cell', {\n              thead__cell_active: searchParams.get('sortBy') === 'name',\n            })}\n            onClick={() => {\n              handleSort('name');\n              // setQueryValue('name');\n              // searchParams.set('sortBy', 'name');\n              // console.log(sortQuery);\n              // history.push({\n              //   search: searchParams.toString(),\n              // });\n            }}\n          >\n            Name\n          </th>\n          <th\n            className={classnames('thead__cell', {\n              thead__cell_active: searchParams.get('sortBy') === 'sex',\n            })}\n            onClick={() => {\n              handleSort('sex');\n            }}\n          >\n            Sex\n          </th>\n          <th\n            className={classnames('thead__cell', {\n              thead__cell_active: searchParams.get('sortBy') === 'born',\n            })}\n            onClick={() => {\n              handleSort('born');\n            }}\n          >\n            Born\n          </th>\n          <th\n            className={classnames('thead__cell', {\n              thead__cell_active: searchParams.get('sortBy') === 'died',\n            })}\n            onClick={() => {\n              handleSort('died');\n            }}\n          >\n            Died\n          </th>\n          <th\n            className={classnames('thead__cell', {\n              thead__cell_active: searchParams.get('sortBy') === 'motherName',\n            })}\n            onClick={() => {\n              handleSort('motherName');\n            }}\n          >\n            Mother\n          </th>\n          <th\n            className={classnames('thead__cell', {\n              thead__cell_active: searchParams.get('sortBy') === 'fatherName',\n            })}\n            onClick={() => {\n              handleSort('fatherName');\n            }}\n          >\n            Father\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {sorteredPeople.map(person => (\n          <PersonRow\n            key={person.name}\n            person={person}\n            sortQuery={sortQuery}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState([]);\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n  const filteredPeople = useMemo(() => people\n    .filter((any) => {\n      if (any.motherName\n        && any.motherName.toLowerCase().includes(query.toLowerCase())) {\n        return true;\n      }\n\n      if (any.fatherName\n        && any.fatherName.toLowerCase().includes(query.toLowerCase())) {\n        return true;\n      }\n\n      return any.name.toLowerCase().includes(query.toLowerCase());\n    }),\n  [people, query]);\n\n  // console.log(query);\n\n  useEffect(() => {\n    getPeople()\n      .then(result => setPeople(result\n        .map(person => (\n          {\n            ...person,\n            mother: result.find(any => any.name === person.motherName),\n            father: result.find(any => any.name === person.fatherName),\n          }\n        ))));\n  }, []);\n\n  // console.log(people);\n\n  return (\n    <>\n      <h1>People Page</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(event) => {\n            searchParams.set('query', event.target.value);\n            history.push({\n              search: searchParams.toString(),\n            });\n          }}\n        />\n      </div>\n      {people.length > 0 && (\n        <PeopleTable\n          people={filteredPeople}\n        />\n      ) }\n    </>\n  );\n};\n","import React from 'react';\nimport { NavLink, Redirect, Route, Switch } from 'react-router-dom';\n\nimport './App.scss';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { PeoplePage } from './components/PeoplePage';\n\nconst App = () => (\n  <div className=\"App\">\n    <header>\n      <nav className=\"nav\">\n        <ul className=\"nav__list\">\n          <li className=\"nav__item\">\n            <NavLink\n              className=\"nav__link\"\n              activeClassName=\"nav__active\"\n              to=\"/\"\n              exact\n            >\n              Home\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink\n              className=\"nav__link\"\n              activeClassName=\"nav__active\"\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n\n    <Switch>\n      <Route path=\"/\" exact>\n        <h1>HomePage</h1>\n      </Route>\n      <Route path=\"/home\">\n        <Redirect to=\"/\" />\n      </Route>\n      <Route path=\"/people/:personSlug?\">\n        <PeoplePage />\n      </Route>\n      <Route path=\"*\">\n        <NotFoundPage />\n      </Route>\n    </Switch>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}